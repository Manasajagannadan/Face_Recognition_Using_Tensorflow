# -*- coding: utf-8 -*-
"""face rec2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/113u7umipgKTntL5LvhOKqmZxkZh28WTH
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import numpy as np
import os
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.image as mpimg
# %matplotlib inline
from tensorflow.keras.preprocessing.image import array_to_img, img_to_array, load_img

!unzip x.zip

#base_dir = "x"
#seta = "deepika"
##setb = "ranveer"
#train_dir = os.path.join(base_dir, 'train') 
#test_dir = os.path.join(base_dir, 'test')

import cv2
train_data_dir = "x/train"
categories = ["deepika", "ranveer"]
images = []
labels = []
IMG_SIZE = 150

training_data = []

def create_training_data():
    for category in categories:
        path = os.path.join(train_data_dir,category)
        class_num = categories.index(category)
        labels.append(class_num)
        for img in os.listdir(path): 
            img_array = cv2.imread(os.path.join(path,img) ,cv2.IMREAD_GRAYSCALE) 
            #new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))  
            images.append(img_array)  
            training_data.append([img_array, class_num])
create_training_data()
print("training_data = ",len(training_data))
print("images",len(images))
print("labels",len(labels))

datagen = ImageDataGenerator(
    rotation_range = 40,
    width_shift_range = 0.2,
    height_shift_range = 0.2,
    shear_range = 0.2,
    zoom_range = 0.2,
    horizontal_flip = True,
    fill_mode = 'nearest')

train_images = images
train_labels = labels

plt.figure()
plt.imshow(train_images[0])
plt.colorbar()
plt.grid(False)
plt.show()

plt.figure(figsize=(10,10))
for i in range(5):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images[i], cmap=plt.cm.binary)
    #plt.xlabel(class_num[train_labels[i]])
plt.show()

import cv2
test_data_dir = "x/test"
categories = ["deepika", "ranveer"]
images1 = []
labels1 = []
IMG_SIZE = 150

testing_data = []

def create_testing_data():
    for category in categories:
        path = os.path.join(test_data_dir,category)
        class_num = categories.index(category)
        labels1.append(class_num)
        for img in os.listdir(path): 
            img_array = cv2.imread(os.path.join(path,img) ,cv2.IMREAD_GRAYSCALE) 
            #new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))  
            images1.append(img_array)  
            testing_data.append([img_array, class_num])
create_testing_data()
print("testing_data = ",len(testing_data))
print("images1",len(images1))
print("labels1",len(labels1))

from tensorflow.keras import layers
from tensorflow.keras import Model
img_input = layers.Input(shape = (150, 150, 3))
x = layers.Conv2D(64, 3, activation = 'relu')(img_input)
x = layers.MaxPooling2D(2)(x)
x = layers.Conv2D(128, 3, activation = 'relu')(x)
x = layers.MaxPooling2D(2)(x)
x = layers.Conv2D(256, 3, activation = 'relu')(x)
x = layers.MaxPooling2D(2)(x)
x = layers.Conv2D(512, 3, activation = 'relu')(x)
x = layers.MaxPooling2D(2)(x)
x = layers.Conv2D(512, 3, activation = 'relu')(x)
x = layers.Flatten()(x)
x = layers.Dense(4096, activation = 'relu')(x)
x = layers.Dense(4096, activation = 'relu')(x)
x = layers.Dense(1000, activation = 'relu')(x)
x = layers.Dropout(0.5)(x)
output = layers.Dense(1, activation = 'sigmoid')(x)
model = Model(img_input, output)

model.summary()

import tensorflow as tf
model.compile(loss = "binary_crossentropy", 
              optimizer = tf.train.AdamOptimizer(learning_rate = 0.0005),
              metrics = ['acc'])

from tensorflow.keras.preprocessing.image import ImageDataGenerator
train_images = ImageDataGenerator(rescale = 1./255)
train_generator = train_images.flow_from_directory(
    train_data_dir,
    target_size = (150, 150),
    batch_size = 20,
    class_mode = 'binary'
)

mymodel = model.fit_generator(
    train_generator,
    steps_per_epoch = 10,
    epochs = 10,
    verbose = 2
)

test_images = images1
test_labels = labels1

plt.figure()
plt.imshow(test_images[0])
plt.colorbar()
plt.grid(False)
plt.show()

from tensorflow.keras.preprocessing.image import ImageDataGenerator
test_images = ImageDataGenerator(rescale = 1./255)
validation_generator = test_images.flow_from_directory(
    test_data_dir,
    target_size = (150, 150),
    batch_size = 20,
    class_mode = 'binary'
)

mymodel = model.fit_generator(
    validation_generator,
    steps_per_epoch = 10,
    epochs = 10,
    verbose = 2
)

mymodel = model.fit_generator(
    train_generator, 
    steps_per_epoch = 7,
    epochs = 10,
    validation_data=validation_generator,
    #validation_steps = 7,
    verbose = 2)

acc = mymodel.history['acc']
val_acc = mymodel.history['val_acc']
loss = mymodel.history['loss']
val_loss = mymodel.history['val_loss']
epochs = range(len(acc))
plt.plot(epochs, acc)
plt.plot(epochs, val_acc)
plt.title('train & Val acc')
plt.figure()
plt.plot(epochs, loss)
plt.plot(epochs, val_loss)
plt.title('train & val loss')

model.predict(train_generator)

print('identify as : \n')
if(model.predict(train_generator) < 0.5).any():
  print("deepika")
elif(model.predict(train_generator) > 0.5).any():
  print("ranveer")
else:
  print("dont know")